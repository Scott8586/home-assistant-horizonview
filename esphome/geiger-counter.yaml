esphome:
  name: geiger-counter
  friendly_name: Geiger Counter

esp8266:
  board: d1_mini

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "1El+l321uOuw9CeEJX8rxFSQyffZTygfWbYVYOdkZik="

ota:
  password: "0d7fb956101ae1a762e1ceec35c17507"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Geiger Counter Fallback Hotspot"
    password: "gv19JgvVMXNT"

captive_portal:

# Example configuration entry
web_server:

# Activates prometheus /metrics endpoint
prometheus:

# Example configuration entry
time:
  - platform: sntp
    id: sntp_time
    servers:
      - 192.168.35.157

switch:
  - platform: restart
    name: Geiger Counter Restart

sensor:
  - platform: pulse_counter
    pin: D2
    name: Count Rate
    id: "count_rate"
    unit_of_measurement: 'CPM'
    on_raw_value:
      - sensor.template.publish:
          id: radiation_level
          state: !lambda 'return x / 153.8;'
          # this was what I got for my data sheet and it matched reasonably well with the background data that I have.  Many people are using other values.
  - platform: template
    name: "Radiation Level"
    id: "radiation_level"
    unit_of_measurement: 'ÂµSv/h'
    icon: mdi:radioactive
    accuracy_decimals: 5
    
binary_sensor:
  - platform: template
    device_class: safety
    name: "Radiation Warning"
    # This doesn't necessarily represent a "dangerous" count, but one that is abnormally high
    lambda: |-
      if (id(count_rate).state > 100) {
        // High Count.
        return true;
      } else {
        // Normal Count.
        return false;
      }